import Header from "../components/Header";
import Widgets from "../components/Widgets";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { getSession, signOut, useSession } from "next-auth/react";
import Sidebar from "../components/Sidebar";
import { useRouter } from "next/router";
import Feed from "../components/Feed";
import { useRecoilState } from "recoil";
import Modal from "../components/Modal";
import { modalState, modalTypeState } from "../atoms/modalAtom";
import { AnimatePresence } from "framer-motion";
import { connectToDatabase } from "../util/mongodb";
export default function Home({posts,articles}) {
  console.log(posts);
  const [modalOpen,setModalOpen]=useRecoilState(modalState);
  const [modalType,setModalType]=useRecoilState(modalTypeState);
  const router=useRouter()
  
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      // The user is not authenticated, handle it here.
      router.push("/home");
    },
  })
  return (
    
    <div className="bg-[#F3F2EF] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6">
      <Head>
        <title>Feed | Linkedin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/home-logo.svg" />
      </Head>
      <Header />
      <main className="flex justify-center gap-x-5 px-4 sm:px-12 ">
        <div className="flex flex-col md:flex-row gap-x-5 gap-5">
          {/*Sidebar*/}
          <Sidebar/>
          <Feed posts={posts}/>
        </div>
        <Widgets articles={articles}/>
        {/*Widgets*/}
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>
      </main>
      
    </div>
  );
}
export async function getServerSideProps(context) {
  //Checking if users is actually authenticated with server
  const session=await getSession(context)
      if (!session) {
          return {
              redirect: {
                  permanent: false,
                  destination: "/home"
              },
          };

      }
      const {db}=await connectToDatabase();
      const posts= await db.collection("posts").find().sort({timeStamp:-1}).toArray();
      //Get news API
      const results=await fetch(`https://newsapi.org/v2/top-headlines?country=in&apiKey=${process.env.NEWS_API_KEY}`).then((res)=>res.json());
      return {
          props: {
              session,
              articles:results.articles,
              posts:posts.map((post)=>({
                _id:post._id.toString(),
                input: post.input,
                photoUrl: post.photoUrl,
                username:post.username,
                email:post.email,
                userImg:post.userImg,
                createdAt:post.createdAt,
              })),
          },
      };
  
}